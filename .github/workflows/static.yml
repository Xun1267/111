<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>跨情境风险决策的个性化动态评估测验 - 贝叶斯四参数分析版</title>
    
    <!-- 多CDN备选方案 -->
    <script src="https://unpkg.com/jspsych@7.3.4" 
            onerror="loadFromBackupCDN(this, 'jspsych')"></script>
    <script src="https://unpkg.com/@jspsych/plugin-html-keyboard-response@1.1.3" 
            onerror="loadFromBackupCDN(this, 'plugin-html-keyboard-response')"></script>
    <script src="https://unpkg.com/@jspsych/plugin-html-button-response@1.1.3" 
            onerror="loadFromBackupCDN(this, 'plugin-html-button-response')"></script>
    <script src="https://unpkg.com/@jspsych/plugin-instructions@1.1.3" 
            onerror="loadFromBackupCDN(this, 'plugin-instructions')"></script>
    
    <!-- CSS -->
    <link href="https://unpkg.com/jspsych@7.3.4/css/jspsych.css" 
          rel="stylesheet" type="text/css" onerror="loadBackupCSS()" />
    
    <style>
        /* 基础样式 */
        .jspsych-display-element {
            background: #f8f9fa;
            color: #333;
            font-family: 'Arial', 'Microsoft YaHei', sans-serif;
            font-size: 16px;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        
        /* 实验容器 */
        .experiment-container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            padding: 40px;
            position: relative;
        }
        
        /* 情境标识 */
        .scenario-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            border-radius: 10px;
            font-weight: bold;
        }
        
        .scenario-medical { background: linear-gradient(135deg, #e8f5e8, #c8e6c9); color: #2e7d32; }
        .scenario-social { background: linear-gradient(135deg, #fff3e0, #ffcc80); color: #ef6c00; }
        .scenario-economic { background: linear-gradient(135deg, #e3f2fd, #90caf9); color: #1565c0; }
        
        /* 医疗情境样式 */
        .health-status {
            text-align: center;
            margin: 25px 0;
        }
        
        .health-bar-container {
            width: 100%;
            max-width: 450px;
            margin: 20px auto;
            background: #e9ecef;
            border-radius: 25px;
            overflow: hidden;
            height: 35px;
            border: 3px solid #dee2e6;
            position: relative;
        }
        
        .health-bar {
            height: 100%;
            background: linear-gradient(90deg, #dc3545 0%, #ffc107 50%, #28a745 100%);
            transition: width 0.4s ease, background-color 0.3s ease;
            border-radius: 22px;
            position: relative;
        }
        
        .health-bar.side-effect {
            background: #dc3545 !important;
            animation: shake 0.6s ease-in-out;
        }
        
        .intensity-scale {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 450px;
            margin: 20px auto;
            padding: 15px 0;
        }
        
        .intensity-marker {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #dee2e6;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .intensity-marker.active {
            background: #28a745;
            transform: scale(1.8);
            box-shadow: 0 0 10px rgba(40, 167, 69, 0.6);
        }
        
        /* 社会情境样式 */
        .region-map {
            width: 100%;
            max-width: 500px;
            height: 300px;
            margin: 20px auto;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border: 3px solid #6c757d;
            border-radius: 15px;
            position: relative;
            overflow: hidden;
        }
        
        .region-info {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            padding: 20px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            backdrop-filter: blur(5px);
        }
        
        .region-map.unrest {
            background: linear-gradient(135deg, #ffebee, #ffcdd2);
            border-color: #f44336;
            animation: regionShake 0.5s ease-in-out;
        }
        
        .resource-bars {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .resource-bar {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            border: 2px solid #dee2e6;
            transition: all 0.3s ease;
        }
        
        .resource-bar.depleted {
            background: #ffebee;
            border-color: #f44336;
            color: #c62828;
        }
        
        /* 经济情境样式 */
        .asset-info {
            text-align: center;
            margin: 25px 0;
            padding: 20px;
            background: linear-gradient(135deg, #e8f5e8, #f3e5f5);
            border-radius: 15px;
            border: 2px solid #9c27b0;
            animation: priceRise 0.5s ease-out;
        }
        
        .price-chart {
            width: 100%;
            max-width: 500px;
            height: 200px;
            margin: 20px auto;
            background: #ffffff;
            border: 2px solid #1976d2;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .chart-canvas {
            width: 100%;
            height: 100%;
        }
        
        /* 统计面板 */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 20px;
            margin: 25px 0;
        }
        
        .stat-item {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            border: 2px solid #dee2e6;
            transition: all 0.3s ease;
        }
        
        .stat-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        }
        
        .stat-value {
            font-size: 28px;
            font-weight: bold;
            color: #1976d2;
            margin: 10px 0;
        }
        
        .stat-label {
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }
        
        /* 按钮样式 */
        .button-container {
            display: flex;
            justify-content: center;
            gap: 25px;
            margin: 40px 0;
            flex-wrap: wrap;
        }
        
        .experiment-btn {
            padding: 18px 35px;
            font-size: 17px;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 220px;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .risk-btn {
            background: linear-gradient(135deg, #1976d2, #1565c0);
            color: white;
        }
        
        .risk-btn:hover {
            background: linear-gradient(135deg, #1565c0, #0d47a1);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(25, 118, 210, 0.4);
        }
        
        .safe-btn {
            background: linear-gradient(135deg, #28a745, #1e7e34);
            color: white;
        }
        
        .safe-btn:hover {
            background: linear-gradient(135deg, #1e7e34, #155724);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        }
        
        /* 反馈消息 */
        .feedback-message {
            border-radius: 15px;
            padding: 30px;
            margin: 25px 0;
            text-align: center;
            font-size: 18px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .negative-feedback {
            background: linear-gradient(135deg, #ffebee, #ffcdd2);
            border: 3px solid #f44336;
            color: #c62828;
        }
        
        .positive-feedback {
            background: linear-gradient(135deg, #e8f5e8, #c8e6c9);
            border: 3px solid #4caf50;
            color: #2e7d32;
        }
        
        /* 情境转换提示 */
        .scenario-transition {
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            border: 3px solid #1976d2;
            color: #0d47a1;
        }
        
        /* 动画效果 */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-8px); }
            75% { transform: translateX(8px); }
        }
        
        @keyframes regionShake {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        @keyframes crashFlash {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
        
        @keyframes drawPath {
            0% { 
                stroke-dasharray: 1000;
                stroke-dashoffset: 1000;
            }
            100% { 
                stroke-dasharray: 1000;
                stroke-dashoffset: 0;
            }
        }
        
        @keyframes priceRise {
            0% { transform: translateY(10px); opacity: 0.7; }
            100% { transform: translateY(0); opacity: 1; }
        }
        
        /* 情境选择样式 */
        .scenario-selection-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 30px;
            margin: 30px 0;
            max-width: 900px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .scenario-card {
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            min-height: 280px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        
        .scenario-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .scenario-icon {
            transition: all 0.3s ease;
        }
        
        .scenario-card:hover .scenario-icon {
            transform: scale(1.1);
        }
        
        .select-btn {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .scenario-card:hover .select-btn {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        /* 进度指示器 */
        .progress-container {
            margin: 20px 0;
            text-align: center;
        }
        
        .progress-bar {
            width: 100%;
            max-width: 400px;
            height: 10px;
            background: #e9ecef;
            border-radius: 5px;
            margin: 10px auto;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #1976d2, #42a5f5);
            transition: width 0.3s ease;
        }
        
        /* 贝叶斯参数分析结果样式 */
        .bayesian-results {
            background: linear-gradient(135deg, #f3e5f5, #e1f5fe);
            border: 3px solid #9c27b0;
            border-radius: 20px;
            padding: 30px;
            margin: 30px 0;
        }
        
        .parameter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 25px 0;
        }
        
        .parameter-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 2px solid #e0e0e0;
        }
        
        .parameter-value {
            font-size: 24px;
            font-weight: bold;
            color: #1976d2;
            margin: 10px 0;
        }
        
        .parameter-interpretation {
            background: #fff8e1;
            border: 2px solid #ffc107;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            font-size: 14px;
        }
        
        /* 加载和错误处理样式 */
        .loading-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background: #f8f9fa;
        }
        
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #1976d2;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error-container {
            background: #ffebee;
            border: 3px solid #f44336;
            border-radius: 15px;
            padding: 30px;
            margin: 20px;
            max-width: 600px;
            text-align: center;
        }
        
        .retry-btn {
            background: #1976d2;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            margin: 10px 5px;
            transition: all 0.3s ease;
        }
        
        .retry-btn:hover {
            background: #1565c0;
        }
        
        /* 结果页面样式 */
        .results-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            padding: 50px;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin: 40px 0;
        }
        
        .result-card {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            border: 2px solid #dee2e6;
            transition: all 0.3s ease;
        }
        
        .result-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .result-value {
            font-size: 32px;
            font-weight: bold;
            color: #1976d2;
            margin: 15px 0;
        }
        
        .download-btn {
            background: linear-gradient(135deg, #28a745, #1e7e34);
            color: white;
            border: none;
            padding: 18px 35px;
            font-size: 18px;
            border-radius: 12px;
            cursor: pointer;
            margin: 15px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }
        
        .download-btn:hover {
            background: linear-gradient(135deg, #1e7e34, #155724);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.5);
        }
        
        .restart-btn {
            background: linear-gradient(135deg, #1976d2, #1565c0);
            color: white;
            border: none;
            padding: 18px 35px;
            font-size: 18px;
            border-radius: 12px;
            cursor: pointer;
            margin: 15px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(25, 118, 210, 0.3);
        }
        
        .restart-btn:hover {
            background: linear-gradient(135deg, #1565c0, #0d47a1);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(25, 118, 210, 0.5);
        }
    </style>
    
    <!-- CDN备选脚本 -->
    <script>
        const CDN_ALTERNATIVES = {
            jspsych: [
                'https://unpkg.com/jspsych@7.3.4',
                'https://cdn.jsdelivr.net/npm/jspsych@7.3.4'
            ],
            'plugin-html-keyboard-response': [
                'https://unpkg.com/@jspsych/plugin-html-keyboard-response@1.1.3',
                'https://cdn.jsdelivr.net/npm/@jspsych/plugin-html-keyboard-response@1.1.3'
            ],
            'plugin-html-button-response': [
                'https://unpkg.com/@jspsych/plugin-html-button-response@1.1.3',
                'https://cdn.jsdelivr.net/npm/@jspsych/plugin-html-button-response@1.1.3'
            ],
            'plugin-instructions': [
                'https://unpkg.com/@jspsych/plugin-instructions@1.1.3',
                'https://cdn.jsdelivr.net/npm/@jspsych/plugin-instructions@1.1.3'
            ]
        };
        
        let cdnRetryCount = {};
        
        function loadFromBackupCDN(failedElement, packageName) {
            if (!cdnRetryCount[packageName]) {
                cdnRetryCount[packageName] = 0;
            }
            
            const alternatives = CDN_ALTERNATIVES[packageName];
            cdnRetryCount[packageName]++;
            
            if (cdnRetryCount[packageName] < alternatives.length) {
                const newScript = document.createElement('script');
                newScript.src = alternatives[cdnRetryCount[packageName]];
                newScript.onerror = () => loadFromBackupCDN(newScript, packageName);
                failedElement.parentNode.replaceChild(newScript, failedElement);
            } else {
                console.error(`所有CDN备选都失败了: ${packageName}`);
                showError(`无法加载${packageName}`);
            }
        }
        
        function loadBackupCSS() {
            const backupCSS = document.createElement('link');
            backupCSS.href = 'https://cdn.jsdelivr.net/npm/jspsych@7.3.4/css/jspsych.css';
            backupCSS.rel = 'stylesheet';
            backupCSS.type = 'text/css';
            document.head.appendChild(backupCSS);
        }
        
        function showError(message) {
            document.body.innerHTML = `
                <div class="loading-container">
                    <div class="error-container">
                        <h2>⚠️ 加载失败</h2>
                        <p>错误: ${message}</p>
                        <button class="retry-btn" onclick="location.reload()">重新加载</button>
                    </div>
                </div>
            `;
        }
    </script>
</head>

<body>
    <div id="loading-indicator" class="loading-container">
        <div class="loading-spinner"></div>
        <div>正在加载跨情境风险决策测验...</div>
        <div id="loading-status" style="margin-top: 10px; font-size: 14px; color: #666;"></div>
    </div>
    
    <div id="jspsych-target" style="display: none;"></div>

    <script>
        // 全局变量
        let participantId = 'P' + Math.random().toString(36).substr(2, 9);
        const TRIALS_PER_SCENARIO = 50; // 每个情境50试次
        let allExperimentData = [];
        let currentScenario = '';
        let currentTrial = 0;
        let currentRiskLevel = 0;
        let currentPoints = 0;
        
        // 修改：为每个情境单独维护累计点数
        let scenarioPoints = {
            'PTC': 0,      // 医疗情境累计点数
            'WRRD': 0,     // 社会情境累计点数
            'MID': 0       // 经济情境累计点数
        };
        
        let availableScenarios = ['PTC', 'WRRD', 'MID']; // 可选择的情境
        let completedScenarios = []; // 已完成的情境
        let scenarioStartTime = null;
        
        // 用于贝叶斯参数估计的数据
        let bayesianData = {};
        
        // 资产名称池（用于经济情境）
        const assetNames = [
            'TechCoin', 'BioStock', 'GreenEnergy', 'AI-Token', 'MetaShare', 
            'CryptoGold', 'QuantumBit', 'NanoTech', 'SpaceX-Like', 'BlockChain+'
        ];
        
        // 地区名称池（用于社会情境）
        const regionNames = [
            '青山区', '东湖区', '西城区', '南门区', '北关区', '中央区', '港口区', '工业区',
            '新城区', '老城区', '开发区', '科技区', '商贸区', '文教区', '农业区', '山区',
            '河东区', '河西区', '高新区', '经开区'
        ];
        
        // =================
        // 贝叶斯四参数模型实现
        // =================
        
        class BayesianBARTModel {
            constructor() {
                this.maxBalloonSize = 12; // 气球最大尺寸
                this.paramBounds = {
                    phi: [0.1, 0.99],    // 先验信念 Φ
                    eta: [0.01, 5.0],    // 学习率 η  
                    gamma: [0.1, 5.0],   // 风险偏好 γ
                    beta: [0.1, 10.0]    // 决策一致性 β
                };
            }
            
            // 计算气球爆炸概率 p^burst = 1/(x - n^pumps)
            calculateBurstProbability(pumps) {
                return 1.0 / (this.maxBalloonSize - pumps);
            }
            
            // 计算决策者信念 p_k^belief
            calculateBelief(phi, eta, trialHistory, currentTrial) {
                let totalPumps = 0;
                let totalSuccess = 0;
                
                // 累积到当前试次的历史数据
                for (let i = 0; i < currentTrial; i++) {
                    if (trialHistory[i]) {
                        if (trialHistory[i].outcome === 'cash_out') {
                            totalSuccess += trialHistory[i].final_pumps;
                        }
                        totalPumps += trialHistory[i].final_pumps;
                    }
                }
                
                // 贝叶斯更新公式
                const numerator = phi + eta * totalSuccess;
                const denominator = 1 + eta * totalPumps;
                const beliefProb = 1 - (numerator / denominator);
                
                return Math.max(0.001, Math.min(0.999, beliefProb));
            }
            
            // 计算最优充气次数 ω_k = -γ/log(1 - p_k^belief)
            calculateOptimalPumps(gamma, belief) {
                const logTerm = Math.log(1 - belief);
                if (logTerm >= 0) return 1; // 避免除以零或负数
                return Math.max(1, -gamma / logTerm);
            }
            
            // 计算充气行为概率 p_kl^pump = 1/(1 + e^(β×(l - ω_k)))
            calculatePumpProbability(beta, currentPumps, optimalPumps) {
                const exponent = beta * (currentPumps - optimalPumps);
                return 1.0 / (1.0 + Math.exp(exponent));
            }
            
            // 计算对数似然函数
            calculateLogLikelihood(params, behaviorData) {
                const { phi, eta, gamma, beta } = params;
                let logLikelihood = 0;
                
                for (let trial = 0; trial < behaviorData.length; trial++) {
                    const trialData = behaviorData[trial];
                    if (!trialData || !trialData.actions) continue;
                    
                    // 计算该试次的信念
                    const belief = this.calculateBelief(phi, eta, behaviorData, trial);
                    const optimalPumps = this.calculateOptimalPumps(gamma, belief);
                    
                    // 对该试次的每个动作计算似然
                    for (let actionIdx = 0; actionIdx < trialData.actions.length; actionIdx++) {
                        const action = trialData.actions[actionIdx];
                        const currentPumps = actionIdx + 1;
                        
                        const pumpProb = this.calculatePumpProbability(beta, currentPumps, optimalPumps);
                        
                        if (action.action_type === 'risk') {
                            // 选择充气
                            logLikelihood += Math.log(Math.max(0.001, pumpProb));
                        } else if (action.action_type === 'cash_out') {
                            // 选择兑现
                            logLikelihood += Math.log(Math.max(0.001, 1 - pumpProb));
                            break; // 兑现后该试次结束
                        }
                    }
                }
                
                return logLikelihood;
            }
            
            // 简化的网格搜索参数估计
            estimateParameters(behaviorData, scenario) {
                console.log(`开始估计${scenario}情境的贝叶斯参数...`);
                
                let bestParams = null;
                let bestLogLikelihood = -Infinity;
                
                // 网格搜索参数（简化版本）
                const phiValues = [0.3, 0.5, 0.7, 0.85, 0.95];
                const etaValues = [0.1, 0.5, 1.0, 2.0];
                const gammaValues = [0.5, 1.0, 2.0, 3.0];
                const betaValues = [0.5, 1.0, 2.0, 5.0];
                
                let searchCount = 0;
                const totalSearches = phiValues.length * etaValues.length * gammaValues.length * betaValues.length;
                
                for (const phi of phiValues) {
                    for (const eta of etaValues) {
                        for (const gamma of gammaValues) {
                            for (const beta of betaValues) {
                                searchCount++;
                                
                                const params = { phi, eta, gamma, beta };
                                const logLikelihood = this.calculateLogLikelihood(params, behaviorData);
                                
                                if (logLikelihood > bestLogLikelihood) {
                                    bestLogLikelihood = logLikelihood;
                                    bestParams = { ...params };
                                }
                                
                                // 显示进度
                                if (searchCount % 20 === 0) {
                                    console.log(`参数搜索进度: ${((searchCount / totalSearches) * 100).toFixed(1)}%`);
                                }
                            }
                        }
                    }
                }
                
                console.log(`${scenario}情境参数估计完成，最佳对数似然: ${bestLogLikelihood.toFixed(4)}`);
                return {
                    parameters: bestParams,
                    logLikelihood: bestLogLikelihood,
                    converged: true
                };
            }
            
            // 解释参数含义
            interpretParameters(params, scenario) {
                const { phi, eta, gamma, beta } = params;
                
                const interpretation = {
                    phi: {
                        value: phi,
                        level: phi > 0.8 ? '高' : phi > 0.6 ? '中' : '低',
                        meaning: phi > 0.8 ? '非常乐观，认为风险很少发生' : 
                                phi > 0.6 ? '较为乐观，对风险有一定警觉' : '较为悲观，高估风险概率'
                    },
                    eta: {
                        value: eta,
                        level: eta > 1.5 ? '快' : eta > 0.8 ? '中' : '慢',
                        meaning: eta > 1.5 ? '学习速度快，能快速根据反馈调整策略' :
                                eta > 0.8 ? '学习速度适中，逐步根据经验调整' : '学习速度慢，更依赖初始判断'
                    },
                    gamma: {
                        value: gamma,
                        level: gamma > 2.0 ? '高' : gamma > 1.2 ? '中' : '低',
                        meaning: gamma > 2.0 ? '风险偏好强，追求高收益' :
                                gamma > 1.2 ? '风险偏好适中，平衡收益与风险' : '风险厌恶，偏好安全选择'
                    },
                    beta: {
                        value: beta,
                        level: beta > 3.0 ? '高' : beta > 1.5 ? '中' : '低',
                        meaning: beta > 3.0 ? '决策非常一致，严格按计划执行' :
                                beta > 1.5 ? '决策较为一致，偶有随机性' : '决策随机性强，易受情绪影响'
                    }
                };
                
                return interpretation;
            }
        }
        
        // 全局贝叶斯模型实例
        const bayesianModel = new BayesianBARTModel();
        
        // 更新加载状态
        function updateLoadingStatus(message) {
            const statusEl = document.getElementById('loading-status');
            if (statusEl) statusEl.textContent = message;
        }
        
        // 检查库加载状态
        function checkLibrariesLoaded() {
            updateLoadingStatus('检查jsPsych库...');
            
            if (typeof initJsPsych === 'undefined') {
                setTimeout(checkLibrariesLoaded, 500);
                return;
            }
            
            if (typeof jsPsychHtmlButtonResponse === 'undefined' || 
                typeof jsPsychInstructions === 'undefined') {
                setTimeout(checkLibrariesLoaded, 500);
                return;
            }
            
            initializeExperiment();
        }
        
        // 风险函数（通用BART范式）
        function calculateRiskProbability(level, scenario) {
            let baseRisk;
            switch(scenario) {
                case 'PTC': // 医疗：较为保守的风险增长
                    if (level <= 2) baseRisk = 0.01;
                    else if (level <= 5) baseRisk = 0.03 + (level - 2) * 0.05;
                    else baseRisk = 0.18 + (level - 5) * 0.12;
                    break;
                case 'WRRD': // 社会：中等风险增长
                    if (level <= 2) baseRisk = 0.05;
                    else if (level <= 5) baseRisk = 0.1 + (level - 2) * 0.08;
                    else baseRisk = 0.34 + (level - 5) * 0.15;
                    break;
                case 'MID': // 经济：激进的风险增长（模拟金融市场）
                    if (level <= 2) baseRisk = 0.02;
                    else if (level <= 4) baseRisk = 0.05 + (level - 2) * 0.07;
                    else baseRisk = 0.19 + (level - 4) * 0.18;
                    break;
                default:
                    baseRisk = 0.1;
            }
            return Math.min(baseRisk, 0.95); // 上限95%
        }
        
        // 检查是否发生负面事件
        function checkNegativeOutcome(level, scenario) {
            const probability = calculateRiskProbability(level, scenario);
            return Math.random() < probability;
        }
        
        // 修改：记录试次数据，确保每个试次都被记录
        function recordTrialData(scenario, trial, actions, outcome, finalLevel, lockedPoints, lostPoints) {
            const trialData = {
                participant_id: participantId,
                scenario: scenario,
                trial: trial,
                actions: actions, // 保持原始动作序列
                outcome: outcome,
                final_risk_level: finalLevel,
                final_pumps: finalLevel, // 添加final_pumps字段供贝叶斯分析使用
                locked_points: lockedPoints || 0,
                lost_points: lostPoints || 0,
                trial_duration: Date.now() - scenarioStartTime,
                risk_probabilities: actions.map(action => ({
                    level: action.new_level,
                    probability: calculateRiskProbability(action.new_level, scenario)
                })),
                timestamp: new Date().toISOString()
            };
            
            // 确保每个试次都被记录到allExperimentData中
            allExperimentData.push(trialData);
            
            // 为贝叶斯分析准备数据
            if (!bayesianData[scenario]) {
                bayesianData[scenario] = [];
            }
            bayesianData[scenario].push(trialData);
            
            // 输出调试信息，确保数据被正确记录
            console.log(`记录试次数据: 情境${scenario}, 试次${trial}, 结果${outcome}, 总记录数: ${allExperimentData.length}`);
        }
        
        // 创建医疗情境界面
        function createMedicalInterface(trial, intensity, healthPoints, healthPercent) {
            const intensityMarkers = Array.from({length: 10}, (_, i) => 
                `<div class="intensity-marker ${i < intensity ? 'active' : ''}"></div>`
            ).join('');
            
            return `
                <div class="experiment-container">
                    <div class="scenario-header scenario-medical">
                        <h2>🏥 医疗情境：我的治疗方案选择 (PTC)</h2>
                        <p>试次 ${trial}/${TRIALS_PER_SCENARIO}</p>
                    </div>
                    
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${(trial-1)/TRIALS_PER_SCENARIO*100}%"></div>
                        </div>
                        <p>进度: ${trial-1}/${TRIALS_PER_SCENARIO} 完成</p>
                    </div>
                    
                    <div class="health-status">
                        <h3>我的健康状态</h3>
                        <div class="health-bar-container">
                            <div class="health-bar" style="width: ${healthPercent}%"></div>
                        </div>
                        <p>健康感受程度: ${healthPercent}%</p>
                    </div>
                    
                    <div style="text-align: center; margin: 25px 0;">
                        <h4>治疗方案强度等级</h4>
                        <div class="intensity-scale">
                            ${intensityMarkers}
                        </div>
                        <p>当前强度: ${intensity}/10</p>
                    </div>
                    
                    <div class="stats-container">
                        <div class="stat-item">
                            <div class="stat-value">${trial}</div>
                            <div class="stat-label">当前试次</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${intensity}</div>
                            <div class="stat-label">治疗强度</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${healthPoints}</div>
                            <div class="stat-label">本次健康点数</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${scenarioPoints[currentScenario]}</div>
                            <div class="stat-label">医疗情境累计点数</div>
                        </div>
                    </div>
                    
                    <div class="button-container">
                        <button class="experiment-btn risk-btn" onclick="takeRisk()">
                            💊 增加我的治疗强度
                        </button>
                        <button class="experiment-btn safe-btn" onclick="cashOut()">
                            ✅ 保持此强度，锁定健康点数
                        </button>
                    </div>
                    
                    <div style="text-align: center; margin-top: 25px; color: #666;">
                        <p><small>强度越高，健康改善越显著，但副作用风险也越大<br>
                        当前副作用风险: ${(calculateRiskProbability(intensity + 1, 'PTC') * 100).toFixed(1)}%</small></p>
                    </div>
                </div>
            `;
        }
        
        // 创建社会情境界面
        function createSocialInterface(trial, requisitions, militaryPoints) {
            const regionName = regionNames[trial - 1] || `地区${trial}`;
            const unrestLevel = Math.min(requisitions * 15, 90); // 民众不满程度
            
            return `
                <div class="experiment-container">
                    <div class="scenario-header scenario-social">
                        <h2>⚔️ 社会情境：战时资源征收决策 (WRRD)</h2>
                        <p>辖区 ${trial}/${TRIALS_PER_SCENARIO} - ${regionName}</p>
                    </div>
                    
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${(trial-1)/TRIALS_PER_SCENARIO*100}%"></div>
                        </div>
                        <p>进度: ${trial-1}/${TRIALS_PER_SCENARIO} 完成</p>
                    </div>
                    
                    <div class="region-map ${requisitions > 3 ? 'unrest' : ''}">
                        <div class="region-info">
                            <h3>${regionName}</h3>
                            <p>民众不满程度: ${unrestLevel}%</p>
                            <div style="margin: 10px 0;">
                                <div style="width: 100px; height: 10px; background: #e9ecef; border-radius: 5px; margin: 0 auto; overflow: hidden;">
                                    <div style="width: ${unrestLevel}%; height: 100%; background: ${unrestLevel > 60 ? '#dc3545' : unrestLevel > 30 ? '#ffc107' : '#28a745'}; transition: all 0.3s ease;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="resource-bars">
                        <div class="resource-bar ${requisitions > 1 ? 'depleted' : ''}">
                            <div class="stat-value">${Math.max(100 - requisitions * 25, 0)}%</div>
                            <div class="stat-label">粮食储备</div>
                        </div>
                        <div class="resource-bar ${requisitions > 2 ? 'depleted' : ''}">
                            <div class="stat-value">${Math.max(100 - requisitions * 20, 0)}%</div>
                            <div class="stat-label">交通工具</div>
                        </div>
                        <div class="resource-bar ${requisitions > 3 ? 'depleted' : ''}">
                            <div class="stat-value">${Math.max(100 - requisitions * 15, 0)}%</div>
                            <div class="stat-label">劳动力</div>
                        </div>
                    </div>
                    
                    <div class="stats-container">
                        <div class="stat-item">
                            <div class="stat-value">${trial}</div>
                            <div class="stat-label">当前辖区</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${requisitions}</div>
                            <div class="stat-label">征收次数</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${militaryPoints}</div>
                            <div class="stat-label">本次军事点数</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${scenarioPoints[currentScenario]}</div>
                            <div class="stat-label">社会情境累计点数</div>
                        </div>
                    </div>
                    
                    <div class="button-container">
                        <button class="experiment-btn risk-btn" onclick="takeRisk()">
                            ⚔️ 追加一项征收指令
                        </button>
                        <button class="experiment-btn safe-btn" onclick="cashOut()">
                            ✅ 投入战场，锁定资源
                        </button>
                    </div>
                    
                    <div style="text-align: center; margin-top: 25px; color: #666;">
                        <p><small>征收越多，军事储备越丰富，但民众暴动风险也越高<br>
                        当前暴动风险: ${(calculateRiskProbability(requisitions + 1, 'WRRD') * 100).toFixed(1)}%</small></p>
                    </div>
                </div>
            `;
        }
        
        // 创建经济情境界面
        function createEconomicInterface(trial, purchases, profitPoints) {
            const assetName = assetNames[(trial - 1) % assetNames.length];
            
            // 动态价格计算 - 随买入次数增加，价格上涨但波动增大
            let basePrice = 100;
            let priceChange = 0;
            let trendDescription = '';
            let trendColor = '';
            let riskWarning = '';
            
            if (purchases === 0) {
                priceChange = 0;
                trendDescription = '平稳起步';
                trendColor = '#28a745';
            } else if (purchases <= 2) {
                priceChange = purchases * 6 + Math.random() * 4 - 2;
                trendDescription = '温和上涨';
                trendColor = '#28a745';
            } else if (purchases <= 4) {
                priceChange = purchases * 8 + Math.random() * 8 - 4;
                trendDescription = '加速上涨';
                trendColor = '#ffc107';
                riskWarning = '⚠️ 波动加剧';
            } else {
                priceChange = purchases * 10 + Math.random() * 12 - 6;
                trendDescription = '急剧上涨';
                trendColor = '#dc3545';
                riskWarning = '⚠️ 高风险区域';
            }
            
            const currentPrice = basePrice + priceChange;
            
            // 动态生成SVG趋势线
            function generateTrendPath(purchases) {
                let path = 'M10,150'; // 起始点
                
                if (purchases === 0) {
                    // 平缓线
                    path += ' L400,140';
                } else if (purchases <= 2) {
                    // 温和上升
                    path += ' Q100,145 200,130 T400,110';
                } else if (purchases <= 4) {
                    // 加速上升，有波动
                    path += ' Q80,140 150,120 Q220,100 280,80 Q320,70 400,60';
                } else {
                    // 急剧上升，大波动
                    path += ' Q60,130 120,90 Q180,50 240,40 Q300,30 360,20 L400,15';
                }
                
                return path;
            }
            
            const trendPath = generateTrendPath(purchases);
            const strokeColor = purchases <= 2 ? '#28a745' : purchases <= 4 ? '#ffc107' : '#dc3545';
            const strokeWidth = Math.min(2 + purchases * 0.5, 5);
            
            return `
                <div class="experiment-container">
                    <div class="scenario-header scenario-economic">
                        <h2>💰 经济情境：我的逐笔投资决策 (MID)</h2>
                        <p>投资标的 ${trial}/${TRIALS_PER_SCENARIO}</p>
                    </div>
                    
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${(trial-1)/TRIALS_PER_SCENARIO*100}%"></div>
                        </div>
                        <p>进度: ${trial-1}/${TRIALS_PER_SCENARIO} 完成</p>
                    </div>
                    
                    <div class="asset-info">
                        <h3>${assetName}</h3>
                        <p>当前价格: ￥${currentPrice.toFixed(2)} ${priceChange > 0 ? '📈' : priceChange < 0 ? '📉' : '➡️'}</p>
                        <p style="color: ${trendColor};">📊 趋势: ${trendDescription} ${riskWarning}</p>
                        ${purchases > 0 ? `<p style="color: #666; font-size: 14px;">价格变动: ${priceChange > 0 ? '+' : ''}${priceChange.toFixed(2)}元</p>` : ''}
                    </div>
                    
                    <div class="price-chart">
                        <svg width="100%" height="100%" viewBox="0 0 400 180" style="position: absolute; top: 0; left: 0;">
                            <!-- 网格线 -->
                            <defs>
                                <pattern id="grid" width="40" height="18" patternUnits="userSpaceOnUse">
                                    <path d="M 40 0 L 0 0 0 18" fill="none" stroke="#e9ecef" stroke-width="1"/>
                                </pattern>
                            </defs>
                            <rect width="100%" height="100%" fill="url(#grid)" />
                            
                            <!-- 趋势线 -->
                            <path d="${trendPath}" stroke="${strokeColor}" stroke-width="${strokeWidth}" fill="none" 
                                  style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1)); animation: ${purchases > 0 ? 'drawPath 1s ease-out' : 'none'};" />
                            
                            <!-- 买入点标记 -->
                            ${Array.from({length: purchases}, (_, i) => {
                                const x = 10 + (i + 1) * (390 / Math.max(purchases, 5));
                                const y = 150 - (i + 1) * (120 / Math.max(purchases, 5)) + Math.random() * 20 - 10;
                                return `<circle cx="${x}" cy="${y}" r="4" fill="${strokeColor}" stroke="white" stroke-width="2">
                                    <animate attributeName="r" values="2;6;4" dur="0.8s" begin="${i * 0.2}s"/>
                                </circle>`;
                            }).join('')}
                        </svg>
                        
                        <div style="position: absolute; bottom: 5px; right: 10px; font-size: 12px; color: #666;">
                            ${purchases}次买入 ${purchases > 0 ? `| 持仓成本: ￥${(100 + purchases * 5).toFixed(2)}` : ''}
                        </div>
                        <div style="position: absolute; top: 5px; left: 10px; font-size: 12px; color: ${trendColor}; font-weight: bold;">
                            ${purchases > 2 ? `风险等级: ${purchases <= 4 ? '中' : '高'}` : ''}
                        </div>
                    </div>
                    
                    <div class="stats-container">
                        <div class="stat-item">
                            <div class="stat-value">${trial}</div>
                            <div class="stat-label">投资项目</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${purchases}</div>
                            <div class="stat-label">买入次数</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${profitPoints}</div>
                            <div class="stat-label">本次潜在利润</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${scenarioPoints[currentScenario]}</div>
                            <div class="stat-label">经济情境累计点数</div>
                        </div>
                    </div>
                    
                    <div class="button-container">
                        <button class="experiment-btn risk-btn" onclick="takeRisk()">
                            💳 再用我的现金买一笔
                        </button>
                        <button class="experiment-btn safe-btn" onclick="cashOut()">
                            ✅ 停止购买，锁定利润点数
                        </button>
                    </div>
                    
                    <div style="text-align: center; margin-top: 25px; color: #666;">
                        <p><small>买入越多，潜在收益越高，但崩盘风险也越大<br>
                        当前崩盘风险: ${(calculateRiskProbability(purchases + 1, 'MID') * 100).toFixed(1)}%</small></p>
                        ${purchases > 3 ? `<p style="color: #dc3545; font-weight: bold; font-size: 14px; margin-top: 10px;">
                            ⚠️ 警告：价格波动剧烈，崩盘风险显著上升！</p>` : ''}
                    </div>
                </div>
            `;
        }
        
        // 当前试次的操作记录
        let currentTrialActions = [];
        
        // 风险操作
        function takeRisk() {
            currentRiskLevel++;
            scenarioStartTime = scenarioStartTime || Date.now();
            
            const actionData = {
                timestamp: new Date().toISOString(),
                action_type: 'risk',
                new_level: currentRiskLevel,
                risk_probability: calculateRiskProbability(currentRiskLevel, currentScenario)
            };
            
            // 根据情境增加点数
            let pointIncrement;
            switch(currentScenario) {
                case 'PTC': pointIncrement = 10; break;
                case 'WRRD': pointIncrement = 15; break;
                case 'MID': pointIncrement = 12; break;
            }
            
            currentPoints += pointIncrement;
            actionData.new_points = currentPoints;
            currentTrialActions.push(actionData);
            
            // 检查是否发生负面事件
            if (checkNegativeOutcome(currentRiskLevel, currentScenario)) {
                // 发生负面事件
                showNegativeOutcome();
            } else {
                // 继续游戏，更新界面
                updateInterface();
            }
        }
        
        // 兑现操作
        function cashOut() {
            const actionData = {
                timestamp: new Date().toISOString(),
                action_type: 'cash_out',
                final_level: currentRiskLevel,
                locked_points: currentPoints
            };
            currentTrialActions.push(actionData);
            
            // 修改：更新对应情境的累计点数，而不是全局累计
            scenarioPoints[currentScenario] += currentPoints;
            
            // 记录数据
            recordTrialData(
                currentScenario, 
                currentTrial, 
                currentTrialActions, 
                'cash_out', 
                currentRiskLevel, 
                currentPoints, 
                0
            );
            
            showPositiveOutcome();
        }
        
        // 显示负面结果
        function showNegativeOutcome() {
            const lostPoints = currentPoints;
            
            // 修改：确保负面结果也被记录
            recordTrialData(
                currentScenario, 
                currentTrial, 
                currentTrialActions, 
                'explosion', 
                currentRiskLevel, 
                0, 
                lostPoints
            );
            
            let message = '';
            switch(currentScenario) {
                case 'PTC':
                    message = `
                        <div class="feedback-message negative-feedback">
                            <h3>⚠️ 出现严重副作用！</h3>
                            <p style="font-size: 20px; margin: 20px 0;">
                                您在强度等级 ${currentRiskLevel} 时出现了严重的药物副作用反应<br>
                                （如严重恶心、皮疹或其他不适症状）
                            </p>
                            <p style="color: #dc3545; font-weight: bold; font-size: 18px;">
                                治疗被迫中断，本试次的 ${lostPoints} 点健康改善点数清零
                            </p>
                        </div>
                    `;
                    break;
                case 'WRRD':
                    message = `
                        <div class="feedback-message negative-feedback">
                            <h3>⚠️ 过度征收引发暴动！</h3>
                            <p style="font-size: 20px; margin: 20px 0;">
                                在第 ${currentRiskLevel} 次征收后，民众愤怒达到临界点<br>
                                暴民焚烧粮仓，破坏运输工具，秩序彻底崩溃
                            </p>
                            <p style="color: #dc3545; font-weight: bold; font-size: 18px;">
                                征收计划失败，本轮的 ${lostPoints} 点军事储备点数清零
                            </p>
                        </div>
                    `;
                    break;
                case 'MID':
                    message = `
                        <div class="feedback-message negative-feedback">
                            <h3>⚠️ 投资标的突然崩盘！</h3>
                            <p style="font-size: 20px; margin: 20px 0;">
                                在第 ${currentRiskLevel} 次买入后，市场出现剧烈震荡<br>
                                资产价格暴跌超过50%，您的持仓出现重大浮亏
                            </p>
                            <p style="color: #dc3545; font-weight: bold; font-size: 18px;">
                                投资失败，本次的 ${lostPoints} 点预估利润清零
                            </p>
                        </div>
                    `;
                    break;
            }
            
            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    ${message}
                    <div style="text-align: center; margin: 30px 0;">
                        <button class="experiment-btn safe-btn" onclick="nextTrial()">
                            继续下一个${currentScenario === 'PTC' ? '试次' : currentScenario === 'WRRD' ? '辖区' : '投资项目'}
                        </button>
                    </div>
                </div>
            `;
            
            resetTrialData();
        }
        
        // 显示正面结果
        function showPositiveOutcome() {
            let message = '';
            switch(currentScenario) {
                case 'PTC':
                    message = `
                        <div class="feedback-message positive-feedback">
                            <h3>✅ 成功锁定健康改善！</h3>
                            <p style="font-size: 20px; margin: 20px 0;">
                                您选择在强度等级 ${currentRiskLevel} 时保持治疗方案<br>
                                成功锁定了 ${currentPoints} 点健康改善点数
                            </p>
                            <p style="color: #28a745; font-weight: bold; font-size: 18px;">
                                医疗情境累计点数: ${scenarioPoints[currentScenario]} 点
                            </p>
                        </div>
                    `;
                    break;
                case 'WRRD':
                    message = `
                        <div class="feedback-message positive-feedback">
                            <h3>✅ 资源成功投入战场！</h3>
                            <p style="font-size: 20px; margin: 20px 0;">
                                您在征收 ${currentRiskLevel} 次后明智地停止征收<br>
                                成功锁定了 ${currentPoints} 点军事储备点数
                            </p>
                            <p style="color: #28a745; font-weight: bold; font-size: 18px;">
                                社会情境累计点数: ${scenarioPoints[currentScenario]} 点
                            </p>
                        </div>
                    `;
                    break;
                case 'MID':
                    message = `
                        <div class="feedback-message positive-feedback">
                            <h3>✅ 成功锁定投资收益！</h3>
                            <p style="font-size: 20px; margin: 20px 0;">
                                您在买入 ${currentRiskLevel} 次后明智地停止加仓<br>
                                成功锁定了 ${currentPoints} 点预估利润点数
                            </p>
                            <p style="color: #28a745; font-weight: bold; font-size: 18px;">
                                经济情境累计点数: ${scenarioPoints[currentScenario]} 点
                            </p>
                        </div>
                    `;
                    break;
            }
            
            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    ${message}
                    <div style="text-align: center; margin: 30px 0;">
                        <button class="experiment-btn safe-btn" onclick="nextTrial()">
                            进入下一个${currentScenario === 'PTC' ? '试次' : currentScenario === 'WRRD' ? '辖区' : '投资项目'}
                        </button>
                    </div>
                </div>
            `;
            
            resetTrialData();
        }
        
        // 重置试次数据
        function resetTrialData() {
            currentRiskLevel = 0;
            currentPoints = 0;
            currentTrialActions = [];
        }
        
        // 更新界面
        function updateInterface() {
            switch(currentScenario) {
                case 'PTC':
                    const healthPercent = Math.min(50 + currentRiskLevel * 5, 100);
                    document.getElementById('jspsych-target').innerHTML = createMedicalInterface(
                        currentTrial, currentRiskLevel, currentPoints, healthPercent
                    );
                    break;
                case 'WRRD':
                    document.getElementById('jspsych-target').innerHTML = createSocialInterface(
                        currentTrial, currentRiskLevel, currentPoints
                    );
                    break;
                case 'MID':
                    document.getElementById('jspsych-target').innerHTML = createEconomicInterface(
                        currentTrial, currentRiskLevel, currentPoints
                    );
                    break;
            }
        }
        
        // 下一试次
        function nextTrial() {
            currentTrial++;
            
            // 修改：确保每个情境都完成完整的50个试次
            if (currentTrial > TRIALS_PER_SCENARIO) {
                // 当前情境完成，进行贝叶斯参数估计，然后进入下一情境
                console.log(`情境 ${currentScenario} 完成，记录的试次数: ${bayesianData[currentScenario] ? bayesianData[currentScenario].length : 0}`);
                performBayesianAnalysis(currentScenario);
                nextScenario();
            } else {
                setTimeout(() => {
                    updateInterface();
                }, 1000);
            }
        }
        
        // 执行贝叶斯参数分析
        function performBayesianAnalysis(scenario) {
            console.log(`开始对${scenario}情境进行贝叶斯参数分析...`);
            
            // 显示分析进度界面
            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    <div class="bayesian-results">
                        <h2 style="text-align: center; color: #9c27b0;">🧠 正在进行贝叶斯参数分析</h2>
                        <div style="text-align: center; margin: 30px 0;">
                            <div class="loading-spinner"></div>
                            <p>正在分析您在${scenario === 'PTC' ? '医疗' : scenario === 'WRRD' ? '社会' : '经济'}情境中的决策模式...</p>
                            <p style="font-size: 14px; color: #666;">这可能需要几秒钟时间</p>
                        </div>
                    </div>
                </div>
            `;
            
            // 异步执行参数估计
            setTimeout(() => {
                try {
                    const scenarioData = bayesianData[scenario] || [];
                    console.log(`${scenario}情境数据量: ${scenarioData.length} 个试次`);
                    const results = bayesianModel.estimateParameters(scenarioData, scenario);
                    const interpretation = bayesianModel.interpretParameters(results.parameters, scenario);
                    
                    // 存储结果
                    bayesianData[scenario + '_results'] = {
                        parameters: results.parameters,
                        interpretation: interpretation,
                        logLikelihood: results.logLikelihood,
                        converged: results.converged
                    };
                    
                    console.log(`${scenario}情境贝叶斯分析完成:`, results);
                    
                } catch (error) {
                    console.error(`${scenario}情境贝叶斯分析失败:`, error);
                    // 即使分析失败也继续实验
                }
            }, 100);
        }
        
        // 进入下一情境
        function nextScenario() {
            // 将当前情境移到已完成列表
            completedScenarios.push(currentScenario);
            availableScenarios = availableScenarios.filter(s => s !== currentScenario);
            
            if (availableScenarios.length === 0) {
                // 所有情境完成，进行最终的贝叶斯分析并显示结果
                console.log(`所有情境完成，总记录试次数: ${allExperimentData.length}`);
                performFinalBayesianAnalysis();
            } else {
                // 显示情境完成提示，然后让用户选择下一个情境
                showScenarioCompletionMessage();
            }
        }
        
        // 最终贝叶斯分析
        function performFinalBayesianAnalysis() {
            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    <div class="bayesian-results">
                        <h2 style="text-align: center; color: #9c27b0;">🧠 正在进行最终的跨情境贝叶斯分析</h2>
                        <div style="text-align: center; margin: 30px 0;">
                            <div class="loading-spinner"></div>
                            <p>正在整合您在所有情境中的决策数据...</p>
                            <p style="font-size: 14px; color: #666;">分析您的个性化风险决策模式</p>
                        </div>
                    </div>
                </div>
            `;
            
            setTimeout(() => {
                showFinalResults();
            }, 2000);
        }
        
        // 显示情境完成消息
        function showScenarioCompletionMessage() {
            const scenarioNames = {
                'PTC': '医疗情境',
                'WRRD': '社会情境', 
                'MID': '经济情境'
            };
            
            const scenarioIcons = {
                'PTC': '🏥',
                'WRRD': '⚔️',
                'MID': '💰'
            };
            
            const completedName = scenarioNames[currentScenario];
            const completedIcon = scenarioIcons[currentScenario];
            const remainingCount = availableScenarios.length;
            
            // 显示当前情境的贝叶斯分析结果（如果有）
            const currentResults = bayesianData[currentScenario + '_results'];
            let bayesianSummary = '';
            
            if (currentResults && currentResults.parameters) {
                const { phi, eta, gamma, beta } = currentResults.parameters;
                const interp = currentResults.interpretation;
                
                bayesianSummary = `
                    <div class="bayesian-results" style="margin: 20px 0;">
                        <h3 style="color: #9c27b0;">🧠 ${completedName}的贝叶斯参数分析结果</h3>
                        <div class="parameter-grid">
                            <div class="parameter-card">
                                <h4>先验信念 (Φ)</h4>
                                <div class="parameter-value">${phi.toFixed(3)}</div>
                                <div class="stat-label">${interp.phi.level}水平</div>
                                <div class="parameter-interpretation">${interp.phi.meaning}</div>
                            </div>
                            <div class="parameter-card">
                                <h4>学习率 (η)</h4>
                                <div class="parameter-value">${eta.toFixed(3)}</div>
                                <div class="stat-label">${interp.eta.level}学习</div>
                                <div class="parameter-interpretation">${interp.eta.meaning}</div>
                            </div>
                            <div class="parameter-card">
                                <h4>风险偏好 (γ)</h4>
                                <div class="parameter-value">${gamma.toFixed(3)}</div>
                                <div class="stat-label">${interp.gamma.level}风险偏好</div>
                                <div class="parameter-interpretation">${interp.gamma.meaning}</div>
                            </div>
                            <div class="parameter-card">
                                <h4>决策一致性 (β)</h4>
                                <div class="parameter-value">${beta.toFixed(3)}</div>
                                <div class="stat-label">${interp.beta.level}一致性</div>
                                <div class="parameter-interpretation">${interp.beta.meaning}</div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    <div class="feedback-message positive-feedback">
                        <h2>${completedIcon} ${completedName}完成！</h2>
                        <p style="font-size: 20px; margin: 20px 0;">
                            恭喜您完成了${completedName}的所有决策任务！<br>
                            您的表现数据已被记录并分析。
                        </p>
                        ${bayesianSummary}
                        <div style="background: rgba(255,255,255,0.3); padding: 20px; border-radius: 10px; margin: 20px 0;">
                            <p style="font-size: 16px; margin: 10px 0;">
                                <strong>进度更新：</strong><br>
                                已完成情境：${completedScenarios.length}/3<br>
                                剩余情境：${remainingCount}个<br>
                                <strong>${completedName}累计点数：${scenarioPoints[currentScenario]} 点</strong>
                            </p>
                        </div>
                        <p style="font-size: 16px; color: #666;">
                            接下来，您可以从剩余的${remainingCount}个情境中<br>
                            选择您希望进行的下一个情境
                        </p>
                        <div style="margin: 30px 0;">
                            <button class="experiment-btn safe-btn" onclick="showScenarioSelection()">
                                选择下一个情境 →
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 显示情境选择界面
        function showScenarioSelection() {
            const scenarios = [
                {
                    id: 'PTC',
                    name: '医疗情境',
                    icon: '🏥',
                    title: '我的治疗方案选择',
                    description: '模拟您为自己选择治疗方案强度的决策过程',
                    detail: '收益：健康改善点数 | 风险：药物副作用',
                    color: '#2e7d32',
                    bgColor: 'linear-gradient(135deg, #e8f5e8, #c8e6c9)'
                },
                {
                    id: 'WRRD',
                    name: '社会情境',
                    icon: '⚔️',
                    title: '战时资源征收决策',
                    description: '模拟战时官员进行资源征收的决策过程',
                    detail: '收益：军事储备点数 | 风险：民众暴动',
                    color: '#ef6c00',
                    bgColor: 'linear-gradient(135deg, #fff3e0, #ffcc80)'
                },
                {
                    id: 'MID',
                    name: '经济情境',
                    icon: '💰',
                    title: '我的逐笔投资决策',
                    description: '模拟您进行投资加仓的决策过程',
                    detail: '收益：预估利润点数 | 风险：资产崩盘',
                    color: '#1565c0',
                    bgColor: 'linear-gradient(135deg, #e3f2fd, #90caf9)'
                }
            ];

            const availableScenarioCards = scenarios
                .filter(scenario => availableScenarios.includes(scenario.id))
                .map(scenario => `
                    <div class="scenario-card" style="background: ${scenario.bgColor}; border: 3px solid ${scenario.color};" 
                         onclick="selectScenario('${scenario.id}')">
                        <div class="scenario-icon" style="font-size: 60px; margin-bottom: 15px;">${scenario.icon}</div>
                        <h3 style="color: ${scenario.color}; margin: 10px 0;">${scenario.name}</h3>
                        <h4 style="color: ${scenario.color}; margin: 5px 0; font-size: 16px;">${scenario.title}</h4>
                        <p style="margin: 15px 0; font-size: 14px; line-height: 1.5;">${scenario.description}</p>
                        <p style="font-size: 12px; color: #666; margin: 10px 0;">${scenario.detail}</p>
                        <div class="select-btn" style="background: ${scenario.color}; color: white; padding: 10px 20px; border-radius: 25px; margin-top: 15px; font-weight: bold;">
                            选择此情境
                        </div>
                    </div>
                `).join('');

            const completedCount = completedScenarios.length;
            const totalCount = 3;

            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    <div style="text-align: center; margin-bottom: 40px;">
                        <h1 style="color: #1976d2;">情境选择</h1>
                        <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 20px; border-radius: 15px; margin: 20px 0;">
                            <h3>进度：${completedCount}/${totalCount} 情境已完成</h3>
                            <p style="font-size: 16px;">
                                ${completedCount === 0 ? '请选择您想要开始的第一个情境' : 
                                  completedCount === 1 ? '请选择您想要进行的第二个情境' : 
                                  '请选择最后一个情境'}
                            </p>
                            ${completedCount > 0 ? `<p style="font-size: 14px; color: #666;">
                                已完成情境：${completedScenarios.map(id => scenarios.find(s => s.id === id).name).join('、')}
                            </p>` : ''}
                            ${completedCount > 0 ? `<p style="font-size: 14px; color: #666;">
                                累计点数：${Object.entries(scenarioPoints).filter(([key, _]) => completedScenarios.includes(key)).map(([key, value]) => `${scenarios.find(s => s.id === key).name}: ${value}`).join('，')}
                            </p>` : ''}
                        </div>
                    </div>
                    
                    <div class="scenario-selection-grid">
                        ${availableScenarioCards}
                    </div>
                    
                    <div style="text-align: center; margin-top: 40px; font-size: 14px; color: #666;">
                        <p>您可以按照自己的偏好选择情境顺序</p>
                        <p>每个情境包含${TRIALS_PER_SCENARIO}个独立试次，完成后将进行贝叶斯参数分析</p>
                    </div>
                </div>
            `;
        }
        
        // 选择情境
        function selectScenario(scenarioId) {
            startScenario(scenarioId);
        }
        
        // 开始特定情境
        function startScenario(scenario) {
            currentScenario = scenario;
            currentTrial = 1;
            resetTrialData();
            scenarioStartTime = Date.now();
            
            let instructions = '';
            switch(scenario) {
                case 'PTC':
                    instructions = `
                        <h2 style="color: #2e7d32;">🏥 医疗情境：我的治疗方案选择</h2>
                        <p>在接下来的任务中，您将面临一系列您自己的健康决策模拟。请想象您被诊断患有一种慢性但可控的疾病（如中度关节炎、特定过敏症）。</p>
                        <p>每轮试次均在中等健康状况下进行，点击左侧按钮都可以增加治疗强度，您的"健康改善点数"会提高，但副作用风险也在增加。</p>
                        <p>若继续增加强度直至触发"严重副作用"，您的健康点数清零并自动进入下一试次。点击右侧按钮则保留当前健康点数继续进入下一试次。</p>
                        <p>共需完成<strong>${TRIALS_PER_SCENARIO}个独立试次</strong>。<strong>每个试次均为全新开始，互不影响</strong>。</p>
                        <p style="color: #9c27b0;"><strong>完成后将进行贝叶斯四参数分析，评估您的个性化决策模式。</strong></p>
                    `;
                    break;
                case 'WRRD':
                    instructions = `
                        <h2 style="color: #ef6c00;">⚔️ 社会情境：战时资源征收决策</h2>
                        <p>您作为战时决策者，需通过征收资源维持军队战斗力。</p>
                        <p>每次追加征收，您的"军事储备点数"增加，但民众不满风险上升。</p>
                        <p>若触发"民众暴动"，本轮征收收益清零，进入下一辖区。</p>
                        <p>您将在${TRIALS_PER_SCENARIO}个辖区进行资源征收决策。</p>
                        <p style="color: #9c27b0;"><strong>完成后将进行贝叶斯四参数分析，评估您的个性化决策模式。</strong></p>
                    `;
                    break;
                case 'MID':
                    instructions = `
                        <h2 style="color: #1565c0;">💰 经济情境：我的逐笔投资决策</h2>
                        <p>您正在管理自己的投资账户，面对具有潜力但波动性未知的资产。</p>
                        <p>每次购买，您的"预估潜在利润点数"累积，但崩盘风险也在增加。</p>
                        <p>若遭遇突然崩盘，您的潜在利润点数清零。</p>
                        <p>您将交易${TRIALS_PER_SCENARIO}只独立的投资标的。</p>
                        <p style="color: #9c27b0;"><strong>完成后将进行贝叶斯四参数分析，评估您的个性化决策模式。</strong></p>
                    `;
                    break;
            }
            
            document.getElementById('jspsych-target').innerHTML = `
                <div class="experiment-container">
                    <div style="text-align: center; padding: 40px;">
                        ${instructions}
                        <div style="margin: 40px 0;">
                            <button class="experiment-btn safe-btn" onclick="updateInterface()">开始${scenario === 'PTC' ? '医疗' : scenario === 'WRRD' ? '社会' : '经济'}情境</button>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // 修改：显示最终结果，正确计算各情境统计
        function showFinalResults() {
            // 计算各情境的统计数据
            const ptcData = allExperimentData.filter(d => d.scenario === 'PTC');
            const wrrdData = allExperimentData.filter(d => d.scenario === 'WRRD');
            const midData = allExperimentData.filter(d => d.scenario === 'MID');
            
            const stats = {};
            
            [['PTC', ptcData], ['WRRD', wrrdData], ['MID', midData]].forEach(([scenario, data]) => {
                const successTrials = data.filter(d => d.outcome === 'cash_out');
                const explosionTrials = data.filter(d => d.outcome === 'explosion');
                
                stats[scenario] = {
                    totalTrials: data.length,
                    avgFinalLevel: successTrials.length > 0 ? 
                        (successTrials.reduce((sum, d) => sum + d.final_risk_level, 0) / successTrials.length).toFixed(2) : 0,
                    avgLockedPoints: successTrials.length > 0 ?
                        (successTrials.reduce((sum, d) => sum + d.locked_points, 0) / successTrials.length).toFixed(1) : 0,
                    explosionRate: ((explosionTrials.length / data.length) * 100).toFixed(1),
                    avgExplosionLevel: explosionTrials.length > 0 ?
                        (explosionTrials.reduce((sum, d) => sum + d.final_risk_level, 0) / explosionTrials.length).toFixed(2) : 0,
                    totalLocked: scenarioPoints[scenario] // 使用各情境的实际累计点数
                };
            });
            
            // 计算总累计点数
            const totalPoints = scenarioPoints.PTC + scenarioPoints.WRRD + scenarioPoints.MID;
            
            // 生成贝叶斯参数比较
            let bayesianComparison = '';
            const hasAllResults = completedScenarios.every(scenario => bayesianData[scenario + '_results']);
            
            if (hasAllResults) {
                bayesianComparison = `
                    <div class="bayesian-results">
                        <h2 style="text-align: center; color: #9c27b0;">🧠 跨情境贝叶斯参数分析</h2>
                        <p style="text-align: center; margin-bottom: 30px;">基于您在三个情境中的完整决策数据进行的个性化认知建模</p>
                        
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px;">
                            ${completedScenarios.map(scenario => {
                                const results = bayesianData[scenario + '_results'];
                                const scenarioNames = {'PTC': '医疗情境', 'WRRD': '社会情境', 'MID': '经济情境'};
                                const scenarioIcons = {'PTC': '🏥', 'WRRD': '⚔️', 'MID': '💰'};
                                
                                if (results && results.parameters) {
                                    const { phi, eta, gamma, beta } = results.parameters;
                                    const interp = results.interpretation;
                                    
                                    return `
                                        <div style="background: rgba(255,255,255,0.9); padding: 25px; border-radius: 15px; border: 2px solid #e0e0e0;">
                                            <h3 style="color: #1976d2; text-align: center;">${scenarioIcons[scenario]} ${scenarioNames[scenario]}</h3>
                                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0;">
                                                <div style="text-align: center; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                                                    <div style="font-size: 18px; font-weight: bold; color: #9c27b0;">${phi.toFixed(3)}</div>
                                                    <div style="font-size: 12px;">先验信念 (Φ)</div>
                                                    <div style="font-size: 11px; color: #666;">${interp.phi.level}水平</div>
                                                </div>
                                                <div style="text-align: center; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                                                    <div style="font-size: 18px; font-weight: bold; color: #9c27b0;">${eta.toFixed(3)}</div>
                                                    <div style="font-size: 12px;">学习率 (η)</div>
                                                    <div style="font-size: 11px; color: #666;">${interp.eta.level}学习</div>
                                                </div>
                                                <div style="text-align: center; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                                                    <div style="font-size: 18px; font-weight: bold; color: #9c27b0;">${gamma.toFixed(3)}</div>
                                                    <div style="font-size: 12px;">风险偏好 (γ)</div>
                                                    <div style="font-size: 11px; color: #666;">${interp.gamma.level}风险偏好</div>
                                                </div>
                                                <div style="text-align: center; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                                                    <div style="font-size: 18px; font-weight: bold; color: #9c27b0;">${beta.toFixed(3)}</div>
                                                    <div style="font-size: 12px;">决策一致性 (β)</div>
                                                    <div style="font-size: 11px; color: #666;">${interp.beta.level}一致性</div>
                                                </div>
                                            </div>
                                            <div style="background: #fff8e1; padding: 10px; border-radius: 8px; margin-top: 15px;">
                                                <div style="font-size: 13px; line-height: 1.4;">
                                                    <strong>核心特征：</strong>${interp.gamma.meaning}
                                                </div>
                                            </div>
                                        </div>
                                    `;
                                } else {
                                    return `
                                        <div style="background: rgba(255,255,255,0.9); padding: 25px; border-radius: 15px; border: 2px solid #e0e0e0;">
                                            <h3 style="color: #1976d2; text-align: center;">${scenarioIcons[scenario]} ${scenarioNames[scenario]}</h3>
                                            <p style="text-align: center; color: #666;">参数分析未完成</p>
                                        </div>
                                    `;
                                }
                            }).join('')}
                        </div>
                        
                        <div style="background: rgba(156, 39, 176, 0.1); padding: 25px; border-radius: 15px; margin: 30px 0;">
                            <h3 style="color: #9c27b0; text-align: center;">🔍 跨情境个性化风险决策模式解读</h3>
                            ${generateCrossScenarioAnalysis()}
                        </div>
                    </div>
                `;
            } else {
                bayesianComparison = `
                    <div style="background: #fff3cd; padding: 20px; border-radius: 10px; margin: 20px 0; border: 2px solid #ffc107;">
                        <h3 style="color: #856404;">⚠️ 贝叶斯参数分析</h3>
                        <p>部分情境的参数分析未完成，但基础行为数据已完整记录。</p>
                    </div>
                `;
            }
            
            document.getElementById('jspsych-target').innerHTML = `
                <div class="results-container">
                    <h1 style="text-align: center; color: #1976d2;">🎉 跨情境风险决策测验完成！</h1>
                    <h2 style="text-align: center; margin-bottom: 40px;">您的个性化风险决策分析报告</h2>
                    
                    <div style="background: #f0f8ff; padding: 25px; border-radius: 15px; margin: 30px 0; border: 2px solid #1976d2;">
                        <h3 style="text-align: center; color: #1976d2;">📊 数据完整性检查</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0;">
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${stats.PTC.totalTrials}</div>
                                <div style="font-size: 14px;">医疗情境试次</div>
                                <div style="font-size: 12px; color: #666;">目标: ${TRIALS_PER_SCENARIO}</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${stats.WRRD.totalTrials}</div>
                                <div style="font-size: 14px;">社会情境试次</div>
                                <div style="font-size: 12px; color: #666;">目标: ${TRIALS_PER_SCENARIO}</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${stats.MID.totalTrials}</div>
                                <div style="font-size: 14px;">经济情境试次</div>
                                <div style="font-size: 12px; color: #666;">目标: ${TRIALS_PER_SCENARIO}</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(40, 167, 69, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #28a745;">${allExperimentData.length}</div>
                                <div style="font-size: 14px;">总记录试次</div>
                                <div style="font-size: 12px; color: #666;">目标: ${TRIALS_PER_SCENARIO * 3}</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="results-grid">
                        <div class="result-card">
                            <h4>🏥 医疗情境 (PTC)</h4>
                            <div class="result-value">${stats.PTC.avgFinalLevel}</div>
                            <p>平均终止强度</p>
                            <p><small>副作用率: ${stats.PTC.explosionRate}%</small></p>
                            <p><small>累计点数: ${stats.PTC.totalLocked}</small></p>
                        </div>
                        
                        <div class="result-card">
                            <h4>⚔️ 社会情境 (WRRD)</h4>
                            <div class="result-value">${stats.WRRD.avgFinalLevel}</div>
                            <p>平均征收次数</p>
                            <p><small>暴动率: ${stats.WRRD.explosionRate}%</small></p>
                            <p><small>累计点数: ${stats.WRRD.totalLocked}</small></p>
                        </div>
                        
                        <div class="result-card">
                            <h4>💰 经济情境 (MID)</h4>
                            <div class="result-value">${stats.MID.avgFinalLevel}</div>
                            <p>平均买入次数</p>
                            <p><small>崩盘率: ${stats.MID.explosionRate}%</small></p>
                            <p><small>累计点数: ${stats.MID.totalLocked}</small></p>
                        </div>
                        
                        <div class="result-card">
                            <h4>总体效率</h4>
                            <div class="result-value">${totalPoints}</div>
                            <p>三情境累计总点数</p>
                            <p><small>跨情境表现</small></p>
                        </div>
                    </div>
                    
                    ${bayesianComparison}
                    
                    <div style="background: #f8f9fa; padding: 30px; border-radius: 15px; margin: 40px 0;">
                        <h3 style="text-align: center; color: #1976d2;">📊 您的情境选择顺序</h3>
                        <p style="text-align: center; font-size: 16px; margin: 15px 0;">
                            ${completedScenarios.map((scenario, index) => {
                                const names = {'PTC': '医疗情境', 'WRRD': '社会情境', 'MID': '经济情境'};
                                const icons = {'PTC': '🏥', 'WRRD': '⚔️', 'MID': '💰'};
                                return `${index + 1}. ${icons[scenario]} ${names[scenario]}`;
                            }).join(' → ')}
                        </p>
                        
                        <h3 style="text-align: center; color: #1976d2; margin-top: 30px;">💰 各情境点数明细</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
                            <div style="text-align: center; padding: 15px; background: rgba(46, 125, 50, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #2e7d32;">🏥 ${scenarioPoints.PTC}</div>
                                <div style="font-size: 14px;">医疗情境点数</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(239, 108, 0, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #ef6c00;">⚔️ ${scenarioPoints.WRRD}</div>
                                <div style="font-size: 14px;">社会情境点数</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(21, 101, 192, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1565c0;">💰 ${scenarioPoints.MID}</div>
                                <div style="font-size: 14px;">经济情境点数</div>
                            </div>
                        </div>
                        
                        <h3 style="text-align: center; color: #1976d2; margin-top: 30px;">💰 实验报酬计算</h3>
                        <p style="text-align: center; font-size: 18px;">
                            基础报酬 + ${(totalPoints * 0.005).toFixed(2)}元 (风险决策奖励)
                        </p>
                        
                        <h3 style="text-align: center; color: #1976d2; margin-top: 30px;">📈 实验数据概览</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0;">
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${TRIALS_PER_SCENARIO * 3}</div>
                                <div style="font-size: 14px;">预期总试次</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${allExperimentData.length}</div>
                                <div style="font-size: 14px;">实际记录试次</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${allExperimentData.filter(d => d.outcome === 'cash_out').length}</div>
                                <div style="font-size: 14px;">成功兑现</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: rgba(25, 118, 210, 0.1); border-radius: 10px;">
                                <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${allExperimentData.filter(d => d.outcome === 'explosion').length}</div>
                                <div style="font-size: 14px;">发生爆炸</div>
                            </div>
                        </div>
                    </div>
                    
                    <div style="text-align: center;">
                        <button class="download-btn" onclick="downloadAllData()">
                            📊 下载完整实验数据
                        </button>
                        <button class="download-btn" onclick="downloadBayesianResults()">
                            🧠 下载贝叶斯分析报告
                        </button>
                        <button class="download-btn" onclick="downloadSummaryReport()">
                            📋 下载综合分析报告
                        </button>
                        <button class="restart-btn" onclick="location.reload()">
                            🔄 重新开始测验
                        </button>
                    </div>
                </div>
            `;
        }
        
        // 生成跨情境分析
        function generateCrossScenarioAnalysis() {
            let analysis = '<div style="line-height: 1.6;">';
            
            // 检查是否有完整的贝叶斯结果
            const hasAllResults = completedScenarios.every(scenario => bayesianData[scenario + '_results']);
            
            if (hasAllResults) {
                // 提取各情境的参数
                const ptcResults = bayesianData['PTC_results'];
                const wrrdResults = bayesianData['WRRD_results'];
                const midResults = bayesianData['MID_results'];
                
                if (ptcResults && wrrdResults && midResults) {
                    const scenarios = [
                        { name: '医疗情境', key: 'PTC', results: ptcResults },
                        { name: '社会情境', key: 'WRRD', results: wrrdResults },
                        { name: '经济情境', key: 'MID', results: midResults }
                    ];
                    
                    // 找出各参数最高的情境
                    const maxPhi = scenarios.reduce((max, s) => s.results.parameters.phi > max.results.parameters.phi ? s : max);
                    const maxGamma = scenarios.reduce((max, s) => s.results.parameters.gamma > max.results.parameters.gamma ? s : max);
                    const maxEta = scenarios.reduce((max, s) => s.results.parameters.eta > max.results.parameters.eta ? s : max);
                    const maxBeta = scenarios.reduce((max, s) => s.results.parameters.beta > max.results.parameters.beta ? s : max);
                    
                    analysis += `
                        <p><strong>🎯 先验信念差异：</strong>您在<span style="color: #9c27b0; font-weight: bold;">${maxPhi.name}</span>中表现出最乐观的先验信念（Φ=${maxPhi.results.parameters.phi.toFixed(3)}），这表明您在该情境下更倾向于认为风险不会发生。</p>
                        
                        <p><strong>🎲 风险偏好差异：</strong>您在<span style="color: #9c27b0; font-weight: bold;">${maxGamma.name}</span>中表现出最强的风险偏好（γ=${maxGamma.results.parameters.gamma.toFixed(3)}），说明您在该情境下更愿意承担风险以获得更高收益。</p>
                        
                        <p><strong>📚 学习速度差异：</strong>您在<span style="color: #9c27b0; font-weight: bold;">${maxEta.name}</span>中学习速度最快（η=${maxEta.results.parameters.eta.toFixed(3)}），能够更快地根据反馈调整策略。</p>
                        
                        <p><strong>🎯 决策一致性差异：</strong>您在<span style="color: #9c27b0; font-weight: bold;">${maxBeta.name}</span>中决策最为一致（β=${maxBeta.results.parameters.beta.toFixed(3)}），表明在该情境下您的决策更加理性和稳定。</p>
                        
                        <p><strong>🔍 综合评估：</strong>`;
                    
                    // 找出风险行为最高的情境
                    const behaviorStats = completedScenarios.map(scenario => {
                        const data = allExperimentData.filter(d => d.scenario === scenario);
                        const successTrials = data.filter(d => d.outcome === 'cash_out');
                        const avgLevel = successTrials.length > 0 ? 
                            successTrials.reduce((sum, d) => sum + d.final_risk_level, 0) / successTrials.length : 0;
                        return { scenario, avgLevel };
                    });
                    
                    const maxRiskScenario = behaviorStats.reduce((max, s) => s.avgLevel > max.avgLevel ? s : max);
                    const scenarioNames = {'PTC': '医疗情境', 'WRRD': '社会情境', 'MID': '经济情境'};
                    
                    analysis += `基于您的行为数据和认知参数，您在<span style="color: #1976d2; font-weight: bold;">${scenarioNames[maxRiskScenario.scenario]}</span>中表现出最高的风险承担行为，这可能是先验信念、风险偏好和情境特征共同作用的结果。</p>`;
                }
            } else {
                analysis += `
                    <p><strong>基于行为数据的分析：</strong>虽然贝叶斯参数分析未完全完成，但基于您的决策行为数据，我们仍然可以看出您在不同情境下的风险决策模式存在差异。</p>
                    <p>完整的贝叶斯参数分析需要更复杂的计算资源，建议将数据导出后使用专业工具进行深入分析。</p>
                `;
            }
            
            analysis += '</div>';
            return analysis;
        }
        
        // 下载完整数据
        function downloadAllData() {
            const allData = {
                participant_info: {
                    participant_id: participantId,
                    experiment_date: new Date().toISOString(),
                    scenario_order: completedScenarios,
                    trials_per_scenario: TRIALS_PER_SCENARIO,
                    total_expected_trials: TRIALS_PER_SCENARIO * 3,
                    total_recorded_trials: allExperimentData.length,
                    scenario_points: scenarioPoints,
                    experiment_version: 'Bayesian_4_Parameter_Analysis_Fixed'
                },
                behavioral_data: allExperimentData,
                bayesian_data: bayesianData
            };
            
            const jsonContent = JSON.stringify(allData, null, 2);
            downloadFile(jsonContent, `CrossSituational_RiskDecision_Complete_${participantId}_${new Date().toISOString().slice(0,10)}.json`, 'application/json');
            
            // 同时下载CSV格式的行为数据
            const csvHeaders = [
                'participant_id', 'scenario', 'trial', 'outcome', 'final_risk_level', 
                'locked_points', 'lost_points', 'trial_duration', 'actions', 'risk_probabilities', 'timestamp'
            ];
            const csvContent = [
                csvHeaders.join(','),
                ...allExperimentData.map(row => 
                    csvHeaders.map(header => {
                        if (header === 'actions' || header === 'risk_probabilities') {
                            return `"${JSON.stringify(row[header]).replace(/"/g, '""')}"`;
                        }
                        return row[header] || '';
                    }).join(',')
                )
            ].join('\n');
            
            downloadFile(csvContent, `CrossSituational_RiskDecision_Behavioral_${participantId}_${new Date().toISOString().slice(0,10)}.csv`, 'text/csv');
        }
        
        // 下载贝叶斯分析结果
        function downloadBayesianResults() {
            const bayesianResults = {
                participant_id: participantId,
                analysis_date: new Date().toISOString(),
                model_info: {
                    model_type: 'Bayesian_4_Parameter_BART',
                    parameters: ['phi', 'eta', 'gamma', 'beta'],
                    parameter_meanings: {
                        phi: 'Prior belief about balloon not bursting',
                        eta: 'Learning rate',
                        gamma: 'Risk preference',
                        beta: 'Behavioral consistency'
                    }
                },
                scenario_results: {}
            };
            
            // 添加每个情境的贝叶斯结果
            completedScenarios.forEach(scenario => {
                const results = bayesianData[scenario + '_results'];
                if (results) {
                    bayesianResults.scenario_results[scenario] = {
                        parameters: results.parameters,
                        interpretation: results.interpretation,
                        model_fit: {
                            log_likelihood: results.logLikelihood,
                            converged: results.converged
                        }
                    };
                }
            });
            
            const jsonContent = JSON.stringify(bayesianResults, null, 2);
            downloadFile(jsonContent, `Bayesian_Analysis_Results_${participantId}_${new Date().toISOString().slice(0,10)}.json`, 'application/json');
            
            // 创建简化的CSV格式
            const csvHeaders = ['scenario', 'phi', 'eta', 'gamma', 'beta', 'phi_level', 'eta_level', 'gamma_level', 'beta_level', 'log_likelihood'];
            const csvRows = completedScenarios.map(scenario => {
                const results = bayesianData[scenario + '_results'];
                if (results && results.parameters) {
                    const { phi, eta, gamma, beta } = results.parameters;
                    const interp = results.interpretation;
                    return [
                        scenario,
                        phi.toFixed(4),
                        eta.toFixed(4),
                        gamma.toFixed(4),
                        beta.toFixed(4),
                        interp.phi.level,
                        interp.eta.level,
                        interp.gamma.level,
                        interp.beta.level,
                        results.logLikelihood.toFixed(4)
                    ].join(',');
                }
                return `${scenario},,,,,,,,,`;
            });
            
            const csvContent = [csvHeaders.join(','), ...csvRows].join('\n');
            downloadFile(csvContent, `Bayesian_Parameters_${participantId}_${new Date().toISOString().slice(0,10)}.csv`, 'text/csv');
        }
        
        // 下载综合分析报告
        function downloadSummaryReport() {
            const ptcData = allExperimentData.filter(d => d.scenario === 'PTC');
            const wrrdData = allExperimentData.filter(d => d.scenario === 'WRRD');
            const midData = allExperimentData.filter(d => d.scenario === 'MID');
            
            const summary = {
                participant_id: participantId,
                experiment_date: new Date().toISOString(),
                trials_per_scenario: TRIALS_PER_SCENARIO,
                expected_total_trials: TRIALS_PER_SCENARIO * 3,
                actual_total_trials: allExperimentData.length,
                data_completeness: (allExperimentData.length / (TRIALS_PER_SCENARIO * 3) * 100).toFixed(1) + '%',
                
                // 医疗情境数据
                ptc_recorded_trials: ptcData.length,
                ptc_avg_final_level: ptcData.filter(d => d.outcome === 'cash_out').length > 0 ?
                    (ptcData.filter(d => d.outcome === 'cash_out').reduce((sum, d) => sum + d.final_risk_level, 0) / ptcData.filter(d => d.outcome === 'cash_out').length).toFixed(2) : 0,
                ptc_explosion_rate: ((ptcData.filter(d => d.outcome === 'explosion').length / ptcData.length) * 100).toFixed(1),
                ptc_total_locked: scenarioPoints.PTC,
                
                // 社会情境数据
                wrrd_recorded_trials: wrrdData.length,
                wrrd_avg_final_level: wrrdData.filter(d => d.outcome === 'cash_out').length > 0 ?
                    (wrrdData.filter(d => d.outcome === 'cash_out').reduce((sum, d) => sum + d.final_risk_level, 0) / wrrdData.filter(d => d.outcome === 'cash_out').length).toFixed(2) : 0,
                wrrd_explosion_rate: ((wrrdData.filter(d => d.outcome === 'explosion').length / wrrdData.length) * 100).toFixed(1),
                wrrd_total_locked: scenarioPoints.WRRD,
                
                // 经济情境数据
                mid_recorded_trials: midData.length,
                mid_avg_final_level: midData.filter(d => d.outcome === 'cash_out').length > 0 ?
                    (midData.filter(d => d.outcome === 'cash_out').reduce((sum, d) => sum + d.final_risk_level, 0) / midData.filter(d => d.outcome === 'cash_out').length).toFixed(2) : 0,
                mid_explosion_rate: ((midData.filter(d => d.outcome === 'explosion').length / midData.length) * 100).toFixed(1),
                mid_total_locked: scenarioPoints.MID,
                
                // 跨情境比较
                most_risk_taking_scenario: [
                    ['PTC', parseFloat(ptcData.filter(d => d.outcome === 'cash_out').length > 0 ? (ptcData.filter(d => d.outcome === 'cash_out').reduce((sum, d) => sum + d.final_risk_level, 0) / ptcData.filter(d => d.outcome === 'cash_out').length) : 0)],
                    ['WRRD', parseFloat(wrrdData.filter(d => d.outcome === 'cash_out').length > 0 ? (wrrdData.filter(d => d.outcome === 'cash_out').reduce((sum, d) => sum + d.final_risk_level, 0) / wrrdData.filter(d => d.outcome === 'cash_out').length) : 0)],
                    ['MID', parseFloat(midData.filter(d => d.outcome === 'cash_out').length > 0 ? (midData.filter(d => d.outcome === 'cash_out').reduce((sum, d) => sum + d.final_risk_level, 0) / midData.filter(d => d.outcome === 'cash_out').length) : 0)]
                ].sort((a, b) => b[1] - a[1])[0][0],
                
                scenario_completion_order: completedScenarios,
                
                total_points: scenarioPoints.PTC + scenarioPoints.WRRD + scenarioPoints.MID,
                separate_scenario_points: scenarioPoints,
                
                // 添加贝叶斯参数摘要（如果有）
                bayesian_summary: {}
            };
            
            // 添加贝叶斯参数摘要
            completedScenarios.forEach(scenario => {
                const results = bayesianData[scenario + '_results'];
                if (results && results.parameters) {
                    summary.bayesian_summary[scenario] = {
                        phi: results.parameters.phi,
                        eta: results.parameters.eta,
                        gamma: results.parameters.gamma,
                        beta: results.parameters.beta,
                        phi_interpretation: results.interpretation.phi.meaning,
                        gamma_interpretation: results.interpretation.gamma.meaning
                    };
                }
            });
            
            const csvContent = [
                Object.keys(summary).join(','),
                Object.values(summary).map(v => typeof v === 'object' ? JSON.stringify(v) : v).join(',')
            ].join('\n');
            
            downloadFile(csvContent, `CrossSituational_Summary_Report_${participantId}_${new Date().toISOString().slice(0,10)}.csv`, 'text/csv');
        }
        
        // 文件下载功能
        function downloadFile(content, filename, mimeType) {
            const blob = new Blob([content], { type: mimeType + ';charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            link.click();
            URL.revokeObjectURL(link.href);
        }
        
        // 初始化实验
        function initializeExperiment() {
            updateLoadingStatus('初始化实验...');
            
            try {
                document.getElementById('loading-indicator').style.display = 'none';
                document.getElementById('jspsych-target').style.display = 'block';
                
                const jsPsych = initJsPsych({
                    display_element: 'jspsych-target',
                    on_finish: function() {
                        // 实验完成
                    }
                });

                const mainInstructions = {
                    type: jsPsychInstructions,
                    pages: [
                        `<div style="max-width: 900px; margin: 0 auto; padding: 30px; text-align: center;">
                            <h1 style="color: #1976d2;">跨情境风险决策的个性化动态评估测验</h1>
                            <h2 style="color: #9c27b0;">贝叶斯四参数分析版</h2>
                            <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 30px; border-radius: 15px; margin: 30px 0;">
                                <h2>欢迎参与本研究！</h2>
                                <p style="font-size: 18px; line-height: 1.8;">
                                    本测验旨在了解您在不同情境下的风险决策偏好。<br>
                                    您将依次体验<strong>医疗、社会、经济</strong>三个不同的决策情境。<br>
                                    <span style="color: #9c27b0; font-weight: bold;">完成后将进行贝叶斯四参数分析，深入解析您的个性化决策模式。</span>
                                </p>
                            </div>
                        </div>`,
                        
                        `<div style="max-width: 900px; margin: 0 auto; padding: 30px;">
                            <h2 style="color: #1976d2; text-align: center;">测验概况与特色</h2>
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 25px; margin: 30px 0;">
                                <div style="background: linear-gradient(135deg, #e8f5e8, #c8e6c9); padding: 25px; border-radius: 15px; text-align: center;">
                                    <h3 style="color: #2e7d32;">🏥 医疗情境</h3>
                                    <p>模拟您为自己选择治疗方案强度的决策过程</p>
                                    <p><strong>收益：</strong>健康改善点数</p>
                                    <p><strong>风险：</strong>药物副作用</p>
                                    <p><small>50个独立试次</small></p>
                                </div>
                                <div style="background: linear-gradient(135deg, #fff3e0, #ffcc80); padding: 25px; border-radius: 15px; text-align: center;">
                                    <h3 style="color: #ef6c00;">⚔️ 社会情境</h3>
                                    <p>模拟战时官员进行资源征收的决策过程</p>
                                    <p><strong>收益：</strong>军事储备点数</p>
                                    <p><strong>风险：</strong>民众暴动</p>
                                    <p><small>50个独立试次</small></p>
                                </div>
                                <div style="background: linear-gradient(135deg, #e3f2fd, #90caf9); padding: 25px; border-radius: 15px; text-align: center;">
                                    <h3 style="color: #1565c0;">💰 经济情境</h3>
                                    <p>模拟您进行投资加仓的决策过程</p>
                                    <p><strong>收益：</strong>预估利润点数</p>
                                    <p><strong>风险：</strong>资产崩盘</p>
                                    <p><small>50个独立试次</small></p>
                                </div>
                            </div>
                            
                            <div style="background: linear-gradient(135deg, #f3e5f5, #e1f5fe); padding: 25px; border-radius: 15px; margin: 30px 0; border: 3px solid #9c27b0;">
                                <h3 style="color: #9c27b0; text-align: center;">🧠 贝叶斯四参数认知建模</h3>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
                                    <div style="text-align: center; padding: 15px; background: rgba(255,255,255,0.7); border-radius: 10px;">
                                        <div style="font-size: 20px; margin-bottom: 5px;">Φ</div>
                                        <div style="font-size: 14px; font-weight: bold;">先验信念</div>
                                        <div style="font-size: 12px; color: #666;">对风险的初始判断</div>
                                    </div>
                                    <div style="text-align: center; padding: 15px; background: rgba(255,255,255,0.7); border-radius: 10px;">
                                        <div style="font-size: 20px; margin-bottom: 5px;">η</div>
                                        <div style="font-size: 14px; font-weight: bold;">学习率</div>
                                        <div style="font-size: 12px; color: #666;">根据反馈调整速度</div>
                                    </div>
                                    <div style="text-align: center; padding: 15px; background: rgba(255,255,255,0.7); border-radius: 10px;">
                                        <div style="font-size: 20px; margin-bottom: 5px;">γ</div>
                                        <div style="font-size: 14px; font-weight: bold;">风险偏好</div>
                                        <div style="font-size: 12px; color: #666;">追求收益的意愿</div>
                                    </div>
                                    <div style="text-align: center; padding: 15px; background: rgba(255,255,255,0.7); border-radius: 10px;">
                                        <div style="font-size: 20px; margin-bottom: 5px;">β</div>
                                        <div style="font-size: 14px; font-weight: bold;">决策一致性</div>
                                        <div style="font-size: 12px; color: #666;">行为的理性程度</div>
                                    </div>
                                </div>
                            </div>
                        </div>`,
                        
                        `<div style="max-width: 900px; margin: 0 auto; padding: 30px;">
                            <h2 style="color: #1976d2; text-align: center;">重要提醒</h2>
                            <div style="background: #fff3cd; padding: 25px; border-radius: 15px; margin: 25px 0; border: 3px solid #ffc107;">
                                <h3>📋 测验流程：</h3>
                                <ul style="text-align: left; font-size: 16px; line-height: 1.8;">
                                    <li>每个情境包含<strong>${TRIALS_PER_SCENARIO}轮独立决策</strong>（较充足的数据量确保分析准确性）</li>
                                    <li>每轮您可以多次选择"增加风险"或"安全兑现"</li>
                                    <li>风险越高，潜在收益越大，但负面结果概率也越高</li>
                                    <li>完成每个情境后，将立即进行贝叶斯参数分析</li>
                                    <li>完成三个情境后，将获得综合的跨情境分析报告</li>
                                </ul>
                                
                                <h3>🧠 数据分析特色：</h3>
                                <ul style="text-align: left; font-size: 16px; line-height: 1.8;">
                                    <li><strong>完整记录所有试次：</strong>确保每个试次都被记录，保证150次完整数据</li>
                                    <li><strong>各情境独立计分：</strong>医疗、社会、经济情境分别计算累计点数</li>
                                    <li><strong>实时贝叶斯分析：</strong>直接在浏览器中进行参数估计，无需额外软件</li>
                                    <li><strong>个性化解读：</strong>基于四个核心参数深入分析您的决策模式</li>
                                    <li><strong>跨情境比较：</strong>揭示您在不同情境下的认知差异</li>
                                </ul>
                                
                                <h3>💰 报酬机制：</h3>
                                <p style="font-size: 16px; text-align: center;">
                                    您的测验表现将转化为<strong>额外的实验报酬</strong>
                                </p>
                                
                                <h3>🔒 伦理声明：</h3>
                                <p style="font-size: 14px; color: #666; text-align: center;">
                                    所有情境均为模拟决策研究，非真实建议。数据仅用于科学研究，您可随时退出。
                                </p>
                            </div>
                        </div>`
                    ],
                    show_clickable_nav: true,
                    button_label_previous: '上一页',
                    button_label_next: '下一页',
                    button_label_finish: '开始测验',
                    on_finish: function() {
                        showScenarioSelection();
                    }
                };

                jsPsych.run([mainInstructions]);
                
            } catch (error) {
                console.error('实验初始化失败:', error);
                showError(`实验初始化失败: ${error.message}`);
            }
        }
        
        // 页面加载完成后检查依赖
        document.addEventListener('DOMContentLoaded', function() {
            updateLoadingStatus('检查实验依赖...');
            setTimeout(checkLibrariesLoaded, 1000);
        });
        
        if (document.readyState !== 'loading') {
            setTimeout(checkLibrariesLoaded, 1000);
        }
    </script>
</body>
</html>
